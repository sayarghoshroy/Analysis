# -*- coding: utf-8 -*-
"""Statisticial_Tests

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QDUIia7-IXpY71NOycPoWMbDqKbJ_Tys
"""

# Problems on statistical tests

import numpy as np
import scipy as sc
from scipy.stats import f
from scipy.stats import t

"""## $ Problem\ 3$"""

data = [[69, 153],
        [74, 175],
        [68, 155],
        [70, 135],
        [72, 172],
        [67, 150],
        [66, 115],
        [70, 137],
        [76, 200],
        [68, 130],
        [72, 140],
        [79, 265],
        [74, 185],
        [67, 112],
        [66, 140],
        [71, 150],
        [74, 165],
        [75, 185],
        [75, 210],
        [71, 149]]

data = np.asarray(data).T

# Computing Components
alpha = 0.05
n = data.shape[1]
sample_mean = np.mean(data, axis = 1)
target_mean = np.asarray([70, 170])
difference = np.asmatrix(sample_mean - target_mean).T
sample_covariance = np.cov(data)
known_covariance = np.asmatrix([[20, 100], [100, 1000]])

# Computing T-Squared Stat
Z_squared_stat = np.ravel(n * np.matmul(np.matmul(difference.T, np.linalg.inv(known_covariance)), difference))[0]
print('Calculated Z-square statistic value = ' + str(Z_squared_stat))
critical_value = 5.991
print('Chi-Squared Distribution Percentage Points for: ')
print('Degrees of Freedom = p = ' + str(data.shape[0]) + ' with alpha = ' + str(alpha)+ ' is ' + str(critical_value))

"""$We\ therefore\ reject\ H_{0}\ as\ calculated\ value\ of\ the\ Z^2\ statistic\ =\ 10.261\ is\ \ge\ \chi^2_{\alpha, p}\ =\ 5.991$

## $Problem\ 6$
"""

data = [[51, 36, 50, 35, 42],
        [27, 20, 26, 17, 27],
        [37, 22, 41, 37, 30],
        [42, 36, 32, 34, 27],
        [27, 18, 33, 14, 29],
        [43, 32, 43, 35, 40],
        [41, 22, 36, 25, 38],
        [38, 21, 31, 20, 16],
        [36, 23, 27, 25, 28],
        [26, 31, 31, 32, 36],
        [29, 20, 25, 26, 25]]

data = np.asarray(data).T

n = data.shape[1]
sample_mean = np.mean(data, axis = 1)
sample_covariance = np.cov(data)

target_mean = np.asarray([30, 25, 40, 25, 30])

def T_square_value(alpha, p, v):
  # 'v' being the number of degrees of freedom 
  # 'p' - variable setting

  return f.isf(alpha, p, v - p + 1) / (v - p + 1) * (v * p)

def T_value(alpha, p, v):
  return np.sqrt(T_square_value(alpha, p, v))

def get_t_value(alpha, v):
  return t.isf(alpha, v)

"""##### $(a)$"""

difference = np.asmatrix(sample_mean - target_mean).T
computed_T_square = n * np.ravel(np.matmul(np.matmul(difference.T, np.linalg.inv(sample_covariance)), difference))[0]
critical_T_square_value = T_square_value(alpha, data.shape[0], data.shape[1] - 1)

print('Computed T square Statistic = ' + str(computed_T_square))
print('Critical T square value = ' + str(critical_T_square_value))
print('Computed T square statistic is >= Critical T square value: ' + str(computed_T_square >= critical_T_square_value))

"""##### $Therefore,\ we\ reject\ the\ Null\ Hypothesis.$

##### $(b)$
"""

print('Constructing 95 % Simultaneous Confidence intervals:')
print()

critical_T_value = T_value(alpha, data.shape[0], data.shape[1] - 1)

for case in range(0, 5):
  component = np.sqrt(sample_covariance[case, case] / data.shape[1])
  lower_bound = sample_mean[case] - critical_T_value * component
  upper_bound = sample_mean[case] + critical_T_value * component
  print('Range for mu suffix ' + str(case + 1) + ' = (' + str(lower_bound) + ', ' + str(upper_bound) + ')')

"""##### $(c)$"""

print('Constructing 95 % Bonferroni Confidence intervals:')
print()

critical_t_value = get_t_value(alpha / (2 * data.shape[0]), data.shape[1] - 1)

for case in range(0, 5):
  component = np.sqrt(sample_covariance[case, case] / data.shape[1])
  lower_bound = sample_mean[case] - critical_t_value * component
  upper_bound = sample_mean[case] + critical_t_value * component
  print('Range for mu suffix ' + str(case + 1) + ' = (' + str(lower_bound) + ', ' + str(upper_bound) + ')')

"""##### $(d)$"""

print('Testing with a Bonferroni Critical Value:')
print()

critical_t_value = get_t_value(alpha / (2 * data.shape[0]), data.shape[1] - 1)
print('Bonferroni Critical Value = ' + str(critical_t_value))
print()

for case in range(0, 5):
  t_value = (sample_mean[case] - target_mean[case]) * np.sqrt(data.shape[1]) / np.sqrt(sample_covariance[case, case])
  print('Absolute value t for case ' + str(case + 1) + ' = ' + str(np.abs(t_value)))
  print('t suffix ' + str(case + 1) + ' is >= Bonferroni Critical Value: ' + str(np.abs(t_value) >= critical_t_value))
  print()

"""##### $Therefore,\ we\ cannot\ reject\ the\ Null\ Hypothesis.$

## $Problem\ 8$
"""

set_A = [[189, 245, 137, 163],
        [192, 260, 132, 217],
        [217, 276, 141, 192],
        [221, 299, 142, 213],
        [171, 239, 128, 158],
        [192, 262, 147, 173],
        [213, 278, 136, 201],
        [192, 255, 128, 185],
        [170, 244, 128, 192],
        [201, 276, 146, 186],
        [195, 242, 128, 192],
        [205, 263, 147, 192],
        [180, 252, 121, 167],
        [192, 283, 138, 183],
        [200, 294, 138, 188],
        [192, 277, 150, 177],
        [200, 287, 136, 173],
        [181, 255, 146, 183],
        [192, 287, 141, 198]]

set_B = [[181, 305, 184, 209],
        [158, 237, 133, 188],
        [184, 300, 166, 231],
        [171, 273, 162, 213],
        [181, 297, 163, 224],
        [181, 308, 160, 223],
        [177, 301, 166, 221],
        [198, 308, 141, 197],
        [180, 286, 146, 214],
        [177, 299, 171, 192],
        [176, 317, 166, 213],
        [192, 312, 166, 209],
        [176, 285, 141, 200],
        [169, 287, 162, 214],
        [164, 265, 147, 192],
        [181, 308, 157, 204],
        [192, 276, 154, 209],
        [181, 278, 149, 235],
        [175, 271, 140, 192],
        [197, 303, 170, 205]]

set_A = np.asarray(set_A)
set_B = np.asarray(set_B)

p = set_A.shape[1]
n_1 = set_A.shape[0]
n_2 = set_B.shape[0]

print('Number of Datapoints: ')
print(' • n_1 = ' + str(n_1))
print(' • n_2 = ' + str(n_2))

sample_mean_1 = np.mean(set_A, axis = 0)
sample_mean_2 = np.mean(set_B, axis = 0)
difference = np.asmatrix(sample_mean_1 - sample_mean_2).T

W_1 = np.cov(set_A.T) * (n_1 - 1)
W_2 = np.cov(set_B.T) * (n_2 - 1)

S_pl = (W_1 + W_2) / (n_1 + n_2 - 2)

"""##### $(a)$"""

# Computing T_square statistic
constant = (n_1 * n_2) / (n_1 + n_2)
T_square_stat = constant * np.ravel(np.matmul(np.matmul(difference.T, np.linalg.inv(S_pl)), difference))[0]
print('Computed T square Statistic = ' + str(T_square_stat))

# Computing Critical Value
alpha = 0.05
T_square_critical = T_square_value(alpha, p, n_1 + n_2 - 2)
print('Critical T square value = ' + str(T_square_critical))
print('Computed T square statistic is >= Critical T square value: ' + str(T_square_stat >= T_square_critical))

"""##### $We\ therefore\ reject\ the\ Null\ hypothesis\ with\ error\ rate\ 5\%.$

##### $(b)$
"""

# Calculating discriminant function coefficient vector
a = np.matmul(np.linalg.inv(S_pl), difference)
print('Discriminant function coefficient vector a = ')
print(str(a))

"""##### $(c)$"""

# Defining function for t square of vector
def t_square_vector(vector):
  global n_1, n_2, difference, S_pl
  step = np.ravel(np.matmul(vector.T, difference))[0]

  numerator = step * step
  step = np.ravel(np.matmul(np.matmul(vector.T, S_pl), vector))[0]
  
  constant = (n_1 + n_2) / (n_1 * n_2)
  denominator = constant * step
  return (numerator / denominator)

print('Computed value of created function with vector a: ')
print(str(t_square_vector(a)))

"""##### $Computed\ T^2\ equals\ t^2(a).\ (Verified)$

## $Problem\ 9$

##### $(a)$
"""

# Calculating Simultaneous Confidence Intervals
print('Constructing 95 % Simultaneous Confidence intervals:')
print()

critical_T_value = T_value(alpha, p, n_1 + n_2 - 2)
constant = (n_1 + n_2) / (n_1 * n_2)

for case in range(0, p):
  component = np.sqrt(constant * S_pl[case, case])
  centre_point = sample_mean_1[case] - sample_mean_2[case]
  lower_bound = centre_point - critical_T_value * component
  upper_bound = centre_point + critical_T_value * component
  print('Range for (mu_1 - mu_2) suffix ' + str(case + 1) + ' = (' + str(lower_bound) + ', ' + str(upper_bound) + ')')

"""##### $(b)$"""

# Calculating Bonferroni Confidence Intervals
print('Constructing 95 % Bonferroni Confidence intervals:')
print()

critical_t_value = get_t_value(alpha / (2 * p), n_1 + n_2 - 2)
constant = (n_1 + n_2) / (n_1 * n_2)

for case in range(0, p):
  component = np.sqrt(constant * S_pl[case, case])
  centre_point = sample_mean_1[case] - sample_mean_2[case]
  lower_bound = centre_point - critical_t_value * component
  upper_bound = centre_point + critical_t_value * component
  print('Range for (mu_1 - mu_2) suffix ' + str(case + 1) + ' = (' + str(lower_bound) + ', ' + str(upper_bound) + ')')

"""## $Problem\ 10$"""

def compute_C_statistic(C):
  global n_1, n_2, sample_mean_1, sample_mean_2, S_pl, difference
  element = np.matmul(C, difference)
  centering = np.linalg.inv(np.matmul(np.matmul(C, S_pl), C.T))
  constant = (n_1 * n_2) / (n_1 + n_2)

  complete = constant * np.matmul(np.matmul(element.T, centering), element)
  return np.ravel(complete)[0]

alpha = 0.05

"""### $Part\ (a)$"""

C = [[-1, 1, 0, 0], [0, -1, 1, 0], [0, 0, -1, 1]]
C = np.asmatrix(C)

k = C.shape[0]
print(' • Dimensions of C = ' + str(np.shape(C)))
print(' • Rank(C) = ' + str(np.linalg.matrix_rank(C)))
print(' • k = ' + str(k))
print()

T_square_val_stat = compute_C_statistic(C)
critical_T_square_value = T_square_value(alpha, k, n_1 + n_2 - 2)

print('Computed T square statistic = ' + str(T_square_val_stat))
print('Critical T square value = ' + str(critical_T_square_value))

print('Computer T square statistic >= Critical Value: ' + str(T_square_val_stat >= critical_T_square_value))

"""$Hypothesis\ Rejected.$

### $Part\ (b)$
"""

C = [[-1, -3, 1, 1], [1, 0, 0, -1]]
C = np.asmatrix(C)

k = C.shape[0]
print(' • Dimensions of C = ' + str(np.shape(C)))
print(' • Rank(C) = ' + str(np.linalg.matrix_rank(C)))
print(' • k = ' + str(k))
print()

T_square_val_stat = compute_C_statistic(C)
critical_T_square_value = T_square_value(alpha, k, n_1 + n_2 - 2)

print('Computed T square statistic = ' + str(T_square_val_stat))
print('Critical T square value = ' + str(critical_T_square_value))

print('Computer T square statistic >= Critical Value: ' + str(T_square_val_stat >= critical_T_square_value))

"""$Hypothesis\ Rejected.$"""

# ^_^ Thank You